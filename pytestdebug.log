versions pytest-7.2.1, python-3.11.1.final.0
cwd=/home/dvm777/m5/m5-pet-kare-davi894
args=('-vvv', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f23f5078550>
    pytest_plugin_registered [hook]
        plugin: <Session m5-pet-kare-davi894 exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f23f5078550>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f23f3c1c890>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f23f3c1cd90>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f23f5078550>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_django.plugin' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/pytest_django/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_testdox.plugin' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/pytest_testdox/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f23f3c1c890>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f23f3c1cd90>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f23f3c1d850>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f23f3c1d810>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f23f5078550>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_django.plugin' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/pytest_django/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_testdox.plugin' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/pytest_testdox/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f23f3c1c890>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f23f3c1cd90>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f23f3c1d850>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f23f3c1d810>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f23f3c4dfd0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f23f5663bd0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f23f5078550>
          start_path: /home/dvm777/m5/m5-pet-kare-davi894
          startdir: /home/dvm777/m5/m5-pet-kare-davi894
      finish pytest_report_header --> [['rootdir: /home/dvm777/m5/m5-pet-kare-davi894, configfile: pytest.ini', 'plugins: django-4.5.2, testdox-3.0.1'], ['django: settings: pet_kare.settings (from ini)'], 'cachedir: .pytest_cache', ['using: pytest-7.2.1', 'setuptools registered plugins:', '  pytest-django-4.5.2 at /home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/pytest_django/plugin.py', '  pytest-testdox-3.0.1 at /home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/pytest_testdox/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/home/dvm777/m5/m5-pet-kare-davi894'] [collection]
        pytest_collectstart [hook]
            collector: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (PosixPath('/home/dvm777/m5/m5-pet-kare-davi894'), []) [collection]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/.gitignore
                path: /home/dvm777/m5/m5-pet-kare-davi894/.gitignore
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/.gitignore
                path: /home/dvm777/m5/m5-pet-kare-davi894/.gitignore
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/README.md
                path: /home/dvm777/m5/m5-pet-kare-davi894/README.md
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/README.md
                path: /home/dvm777/m5/m5-pet-kare-davi894/README.md
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/db.sqlite3
                path: /home/dvm777/m5/m5-pet-kare-davi894/db.sqlite3
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/db.sqlite3
                path: /home/dvm777/m5/m5-pet-kare-davi894/db.sqlite3
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/manage.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/manage.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/manage.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/manage.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pytest.ini
                path: /home/dvm777/m5/m5-pet-kare-davi894/pytest.ini
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/pytest.ini
                path: /home/dvm777/m5/m5-pet-kare-davi894/pytest.ini
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pytestdebug.log
                path: /home/dvm777/m5/m5-pet-kare-davi894/pytestdebug.log
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/pytestdebug.log
                path: /home/dvm777/m5/m5-pet-kare-davi894/pytestdebug.log
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/requirements.txt
                path: /home/dvm777/m5/m5-pet-kare-davi894/requirements.txt
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/requirements.txt
                path: /home/dvm777/m5/m5-pet-kare-davi894/requirements.txt
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/.git
                path: /home/dvm777/m5/m5-pet-kare-davi894/.git
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/.pytest_cache
                path: /home/dvm777/m5/m5-pet-kare-davi894/.pytest_cache
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups
                path: /home/dvm777/m5/m5-pet-kare-davi894/groups
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/groups/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/groups/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/groups/__init__.py
              finish pytest_pycollect_makemodule --> <Package groups> [hook]
            finish pytest_collect_file --> [<Package groups>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations
                path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
              finish pytest_pycollect_makemodule --> <Package migrations> [hook]
            finish pytest_collect_file --> [<Package migrations>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare
                path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/__init__.py
              finish pytest_pycollect_makemodule --> <Package pet_kare> [hook]
            finish pytest_collect_file --> [<Package pet_kare>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets
                path: /home/dvm777/m5/m5-pet-kare-davi894/pets
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/pets/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/pets/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/pets/__init__.py
              finish pytest_pycollect_makemodule --> <Package pets> [hook]
            finish pytest_collect_file --> [<Package pets>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations
                path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
              finish pytest_pycollect_makemodule --> <Package migrations> [hook]
            finish pytest_collect_file --> [<Package migrations>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/tests/__init__.py
              finish pytest_pycollect_makemodule --> <Package tests> [hook]
            finish pytest_collect_file --> [<Package tests>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
              finish pytest_pycollect_makemodule --> <Package factories> [hook]
            finish pytest_collect_file --> [<Package factories>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
              finish pytest_pycollect_makemodule --> <Package tarefas> [hook]
            finish pytest_collect_file --> [<Package tarefas>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
              finish pytest_pycollect_makemodule --> <Package tarefa_1> [hook]
            finish pytest_collect_file --> [<Package tarefa_1>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
              finish pytest_pycollect_makemodule --> <Package tarefa_3> [hook]
            finish pytest_collect_file --> [<Package tarefa_3>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
              finish pytest_pycollect_makemodule --> <Package tarefa_4> [hook]
            finish pytest_collect_file --> [<Package tarefa_4>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits
                path: /home/dvm777/m5/m5-pet-kare-davi894/traits
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/traits/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/traits/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/traits/__init__.py
              finish pytest_pycollect_makemodule --> <Package traits> [hook]
            finish pytest_collect_file --> [<Package traits>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations
                path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
                path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
                  path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
              finish pytest_pycollect_makemodule --> <Package migrations> [hook]
            finish pytest_collect_file --> [<Package migrations>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x7f23f5078550>
                collection_path: /home/dvm777/m5/m5-pet-kare-davi894/venv
                path: /home/dvm777/m5/m5-pet-kare-davi894/venv
            finish pytest_ignore_collect --> True [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=13 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=13 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package groups> [collection]
      pytest_collectstart [hook]
          collector: <Package groups>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package groups>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/admin.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/admin.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package groups>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/admin.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/admin.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/apps.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/apps.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package groups>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/apps.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/apps.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/models.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package groups>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/models.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/serializers_groups.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/serializers_groups.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package groups>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/serializers_groups.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/serializers_groups.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/tests.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/tests.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package groups>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/tests.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/tests.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/views.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package groups>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/views.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/__init__.py
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'groups/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'groups/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package migrations> [collection]
      pytest_collectstart [hook]
          collector: <Package migrations>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package migrations>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/0001_initial.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/0001_initial.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package migrations>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/0001_initial.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/groups/migrations/0001_initial.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'groups/migrations/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'groups/migrations/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package pet_kare> [collection]
      pytest_collectstart [hook]
          collector: <Package pet_kare>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package pet_kare>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/asgi.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/asgi.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pet_kare>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/asgi.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/asgi.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/settings.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/settings.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pet_kare>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/settings.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/settings.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/urls.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/urls.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pet_kare>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/urls.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/urls.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/wsgi.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/wsgi.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pet_kare>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/wsgi.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pet_kare/wsgi.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pet_kare/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pet_kare/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package pets> [collection]
      pytest_collectstart [hook]
          collector: <Package pets>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package pets>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/admin.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/admin.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/admin.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/admin.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/apps.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/apps.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/apps.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/apps.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/models.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/models.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/serializers_pets.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/serializers_pets.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/serializers_pets.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/serializers_pets.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/tests.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/tests.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/tests.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/tests.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/urls.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/urls.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/urls.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/urls.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/views.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pets>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/views.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/__init__.py
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pets/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pets/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package migrations> [collection]
      pytest_collectstart [hook]
          collector: <Package migrations>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package migrations>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/0001_initial.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/0001_initial.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package migrations>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/0001_initial.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/pets/migrations/0001_initial.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pets/migrations/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pets/migrations/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package factories> [collection]
      pytest_collectstart [hook]
          collector: <Package factories>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package factories>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/pet_factories.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/pet_factories.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package factories>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/pet_factories.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/factories/pet_factories.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/factories/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/factories/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tarefas> [collection]
      pytest_collectstart [hook]
          collector: <Package tarefas>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tarefas>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/__init__.py
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tarefa_1> [collection]
      pytest_collectstart [hook]
          collector: <Package tarefa_1>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tarefa_1>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tarefa_1>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tarefa_1>
              module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py
              path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py
          finish pytest_pycollect_makemodule --> <Module test_models.py> [hook]
        finish pytest_collect_file --> [<Module test_models.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_models.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_models.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_models.py>
      early skip of rewriting module: tests [assertion]
      early skip of rewriting module: tests.tarefas [assertion]
      early skip of rewriting module: tests.tarefas.tarefa_1 [assertion]
      find_module called for: tests.tarefas.tarefa_1.test_models [assertion]
      matched test file '/home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py' [assertion]
      found cached rewritten pyc for /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_1/test_models.py [assertion]
      early skip of rewriting module: django.test [assertion]
      early skip of rewriting module: django.test.client [assertion]
      early skip of rewriting module: django.core.handlers [assertion]
      early skip of rewriting module: django.core.handlers.asgi [assertion]
      early skip of rewriting module: django.core.handlers.base [assertion]
      early skip of rewriting module: django.core.handlers.exception [assertion]
      early skip of rewriting module: django.core.handlers.wsgi [assertion]
      early skip of rewriting module: django.test.signals [assertion]
      early skip of rewriting module: django.test.utils [assertion]
      early skip of rewriting module: xml.dom [assertion]
      early skip of rewriting module: xml.dom.domreg [assertion]
      early skip of rewriting module: xml.dom.minidom [assertion]
      early skip of rewriting module: xml.dom.minicompat [assertion]
      early skip of rewriting module: xml.dom.xmlbuilder [assertion]
      early skip of rewriting module: xml.dom.NodeFilter [assertion]
      early skip of rewriting module: jinja2 [assertion]
      early skip of rewriting module: django.test.testcases [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: django.core.management.sql [assertion]
      early skip of rewriting module: django.core.servers [assertion]
      early skip of rewriting module: django.core.servers.basehttp [assertion]
      early skip of rewriting module: wsgiref [assertion]
      early skip of rewriting module: wsgiref.simple_server [assertion]
      early skip of rewriting module: http.server [assertion]
      early skip of rewriting module: wsgiref.handlers [assertion]
      early skip of rewriting module: wsgiref.util [assertion]
      early skip of rewriting module: wsgiref.headers [assertion]
      early skip of rewriting module: django.core.wsgi [assertion]
      early skip of rewriting module: django.test.html [assertion]
      early skip of rewriting module: django.views.static [assertion]
      early skip of rewriting module: unittest.mock [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: TestCase
            obj: <class 'django.test.testcases.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: Pet
            obj: <class 'pets.models.Pet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: Group
            obj: <class 'groups.models.Group'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: Trait
            obj: <class 'traits.models.Trait'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: patch
            obj: <function patch at 0x7f23f39eab60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: timezone
            obj: <module 'django.utils.timezone' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/django/utils/timezone.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: models
            obj: <module 'django.db.models' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/django/db/models/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: GroupModelTest
            obj: <class 'tests.tarefas.tarefa_1.test_models.GroupModelTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase GroupModelTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: TraitModelTest
            obj: <class 'tests.tarefas.tarefa_1.test_models.TraitModelTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TraitModelTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: PetModelTest
            obj: <class 'tests.tarefas.tarefa_1.test_models.PetModelTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase PetModelTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: PetGroupRelationTest
            obj: <class 'tests.tarefas.tarefa_1.test_models.PetGroupRelationTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase PetGroupRelationTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_models.py>
            name: PetTraitRelationTest
            obj: <class 'tests.tarefas.tarefa_1.test_models.PetTraitRelationTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase PetTraitRelationTest> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py' lenresult=6 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase GroupModelTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase GroupModelTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase GroupModelTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_field_created_at_properties> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_field_created_at_properties>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_field_scientific_name_properties> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_field_scientific_name_properties>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TraitModelTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TraitModelTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TraitModelTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_field_created_at_properties> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_field_created_at_properties>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_field_name_properties> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_field_name_properties>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase PetModelTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase PetModelTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase PetModelTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_field_name_properties> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_field_name_properties>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_field_sex_properties> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_field_sex_properties>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase PetGroupRelationTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase PetGroupRelationTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase PetGroupRelationTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_if_a_group_can_have_many_pets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_if_a_group_can_have_many_pets>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_if_a_group_deletion_is_protected> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_if_a_group_deletion_is_protected>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase PetTraitRelationTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase PetTraitRelationTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase PetTraitRelationTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_if_trait_can_have_many_pets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_if_trait_can_have_many_pets>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/test_models.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_1/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tarefa_3> [collection]
      pytest_collectstart [hook]
          collector: <Package tarefa_3>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tarefa_3>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tarefa_3>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tarefa_3>
              module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py
              path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py
          finish pytest_pycollect_makemodule --> <Module test_views.py> [hook]
        finish pytest_collect_file --> [<Module test_views.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_3/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_views.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_views.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_views.py>
      early skip of rewriting module: tests.tarefas.tarefa_3 [assertion]
      find_module called for: tests.tarefas.tarefa_3.test_views [assertion]
      matched test file '/home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py' [assertion]
      found cached rewritten pyc for /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_3/test_views.py [assertion]
      early skip of rewriting module: rest_framework.test [assertion]
      early skip of rewriting module: rest_framework.compat [assertion]
      early skip of rewriting module: django.contrib.postgres [assertion]
      early skip of rewriting module: django.contrib.postgres.fields [assertion]
      early skip of rewriting module: django.contrib.postgres.fields.array [assertion]
      early skip of rewriting module: django.contrib.postgres.lookups [assertion]
      early skip of rewriting module: django.contrib.postgres.search [assertion]
      early skip of rewriting module: psycopg2 [assertion]
      early skip of rewriting module: coreapi [assertion]
      early skip of rewriting module: uritemplate [assertion]
      early skip of rewriting module: coreschema [assertion]
      early skip of rewriting module: yaml [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: markdown [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.formatters.html [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: ctags [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.lexers.special [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: rest_framework.settings [assertion]
      early skip of rewriting module: rest_framework.renderers [assertion]
      early skip of rewriting module: rest_framework.exceptions [assertion]
      early skip of rewriting module: rest_framework.status [assertion]
      early skip of rewriting module: rest_framework.utils [assertion]
      early skip of rewriting module: rest_framework.utils.serializer_helpers [assertion]
      early skip of rewriting module: rest_framework.utils.json [assertion]
      early skip of rewriting module: rest_framework.serializers [assertion]
      early skip of rewriting module: rest_framework.fields [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: rest_framework.utils.html [assertion]
      early skip of rewriting module: rest_framework.utils.humanize_datetime [assertion]
      early skip of rewriting module: rest_framework.utils.representation [assertion]
      early skip of rewriting module: rest_framework.utils.formatting [assertion]
      early skip of rewriting module: rest_framework.validators [assertion]
      early skip of rewriting module: rest_framework.utils.model_meta [assertion]
      early skip of rewriting module: rest_framework.utils.field_mapping [assertion]
      early skip of rewriting module: rest_framework.relations [assertion]
      early skip of rewriting module: rest_framework.reverse [assertion]
      early skip of rewriting module: rest_framework.utils.urls [assertion]
      early skip of rewriting module: rest_framework.request [assertion]
      early skip of rewriting module: rest_framework.utils.encoders [assertion]
      early skip of rewriting module: rest_framework.utils.breadcrumbs [assertion]
      early skip of rewriting module: tests.factories [assertion]
      early skip of rewriting module: tests.factories.pet_factories [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: patch
            obj: <function patch at 0x7f23f39eab60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: model_to_dict
            obj: <function model_to_dict at 0x7f23f45d5bc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: APITestCase
            obj: <class 'rest_framework.test.APITestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase APITestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: Group
            obj: <class 'groups.models.Group'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: Pet
            obj: <class 'pets.models.Pet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: Trait
            obj: <class 'traits.models.Trait'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: create_multiple_pets
            obj: <function create_multiple_pets at 0x7f23f39ada80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: PetViewsTest
            obj: <class 'tests.tarefas.tarefa_3.test_views.PetViewsTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase PetViewsTest> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_3/test_views.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase APITestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase APITestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase APITestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_3/test_views.py::APITestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_3/test_views.py::APITestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase PetViewsTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase PetViewsTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase PetViewsTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_can_create_pet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_create_pet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_list_pets_with_pagination> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_list_pets_with_pagination>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_not_create_pet_when_missing_keys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_3/test_views.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_3/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tarefa_4> [collection]
      pytest_collectstart [hook]
          collector: <Package tarefa_4>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tarefa_4>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tarefa_4>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tarefa_4>
              module_path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py
              path: /home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py
          finish pytest_pycollect_makemodule --> <Module test_views.py> [hook]
        finish pytest_collect_file --> [<Module test_views.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_4/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_views.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_views.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_views.py>
      early skip of rewriting module: tests.tarefas.tarefa_4 [assertion]
      find_module called for: tests.tarefas.tarefa_4.test_views [assertion]
      matched test file '/home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py' [assertion]
      rewriting PosixPath('/home/dvm777/m5/m5-pet-kare-davi894/tests/tarefas/tarefa_4/test_views.py') [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/dvm777/m5/m5-pet-kare-davi894/venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: patch
            obj: <function patch at 0x7f23f39eab60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: model_to_dict
            obj: <function model_to_dict at 0x7f23f45d5bc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: APITestCase
            obj: <class 'rest_framework.test.APITestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase APITestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: Group
            obj: <class 'groups.models.Group'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: Pet
            obj: <class 'pets.models.Pet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: Trait
            obj: <class 'traits.models.Trait'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: create_multiple_pets
            obj: <function create_multiple_pets at 0x7f23f39ada80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_views.py>
            name: PetDetailViewsTest
            obj: <class 'tests.tarefas.tarefa_4.test_views.PetDetailViewsTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase PetDetailViewsTest> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_4/test_views.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase APITestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase APITestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase APITestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_4/test_views.py::APITestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_4/test_views.py::APITestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase PetDetailViewsTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase PetDetailViewsTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase PetDetailViewsTest>
      finish pytest_make_collect_report --> <CollectReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest' lenresult=10 outcome='passed'> [hook]
    genitems <TestCaseFunction test_can_delete_pet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_delete_pet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_list_pets_by_query_param> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_list_pets_by_query_param>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_not_delete_non_existing_pet_id> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_not_update_non_existing_pet_id> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_retrieve_pet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_retrieve_pet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_update_pet_group> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_update_pet_group>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_update_pet_traits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_update_pet_traits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_update_pet_without_duplicating_existing_group> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_4/test_views.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/tarefas/tarefa_4/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package traits> [collection]
      pytest_collectstart [hook]
          collector: <Package traits>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package traits>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/admin.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/admin.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package traits>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/admin.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/admin.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/apps.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/apps.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package traits>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/apps.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/apps.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/models.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package traits>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/models.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/models.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/serializers_traits.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/serializers_traits.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package traits>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/serializers_traits.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/serializers_traits.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/tests.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/tests.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package traits>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/tests.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/tests.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/views.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package traits>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/views.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/views.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/__init__.py
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'traits/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'traits/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package migrations> [collection]
      pytest_collectstart [hook]
          collector: <Package migrations>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package migrations>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            collection_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/0001_initial.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/0001_initial.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package migrations>
            file_path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/0001_initial.py
            path: /home/dvm777/m5/m5-pet-kare-davi894/traits/migrations/0001_initial.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'traits/migrations/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'traits/migrations/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f23f5078550>
          items: [<TestCaseFunction test_field_created_at_properties>, <TestCaseFunction test_field_scientific_name_properties>, <TestCaseFunction test_field_created_at_properties>, <TestCaseFunction test_field_name_properties>, <TestCaseFunction test_field_name_properties>, <TestCaseFunction test_field_sex_properties>, <TestCaseFunction test_if_a_group_can_have_many_pets>, <TestCaseFunction test_if_a_group_deletion_is_protected>, <TestCaseFunction test_if_trait_can_have_many_pets>, <TestCaseFunction test_can_create_pet>, <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>, <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>, <TestCaseFunction test_can_list_pets_with_pagination>, <TestCaseFunction test_can_not_create_pet_when_missing_keys>, <TestCaseFunction test_can_delete_pet>, <TestCaseFunction test_can_list_pets_by_query_param>, <TestCaseFunction test_can_not_delete_non_existing_pet_id>, <TestCaseFunction test_can_not_update_non_existing_pet_id>, <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>, <TestCaseFunction test_can_retrieve_pet>, <TestCaseFunction test_can_update_pet_group>, <TestCaseFunction test_can_update_pet_traits>, <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>, <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f23f5078550>
            items: [<TestCaseFunction test_field_created_at_properties>, <TestCaseFunction test_field_scientific_name_properties>, <TestCaseFunction test_field_created_at_properties>, <TestCaseFunction test_field_name_properties>, <TestCaseFunction test_field_name_properties>, <TestCaseFunction test_field_sex_properties>, <TestCaseFunction test_if_a_group_can_have_many_pets>, <TestCaseFunction test_if_a_group_deletion_is_protected>, <TestCaseFunction test_if_trait_can_have_many_pets>, <TestCaseFunction test_can_create_pet>, <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>, <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>, <TestCaseFunction test_can_list_pets_with_pagination>, <TestCaseFunction test_can_not_create_pet_when_missing_keys>, <TestCaseFunction test_can_delete_pet>, <TestCaseFunction test_can_list_pets_by_query_param>, <TestCaseFunction test_can_not_delete_non_existing_pet_id>, <TestCaseFunction test_can_not_update_non_existing_pet_id>, <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>, <TestCaseFunction test_can_retrieve_pet>, <TestCaseFunction test_can_update_pet_group>, <TestCaseFunction test_can_update_pet_traits>, <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>, <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>]
            start_path: /home/dvm777/m5/m5-pet-kare-davi894
            startdir: /home/dvm777/m5/m5-pet-kare-davi894
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=24>
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_field_created_at_properties>
          nextitem: <TestCaseFunction test_field_scientific_name_properties>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 22, 'GroupModelTest.test_field_created_at_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_field_created_at_properties>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> <pytest_django.plugin._DatabaseBlocker object at 0x7f23f4efce10> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
                request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> True [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
                request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> False [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
                request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> False [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
                request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> None [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
                request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> None [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
                request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> None [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
                request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
            finish pytest_fixture_setup --> None [hook]
            pytest_fixture_setup [hook]
                fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
                request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
            early skip of rewriting module: django.core.management.commands [assertion]
            early skip of rewriting module: django.core.management.commands.migrate [assertion]
            early skip of rewriting module: django.db.migrations.autodetector [assertion]
            early skip of rewriting module: django.db.migrations.optimizer [assertion]
            early skip of rewriting module: django.db.migrations.questioner [assertion]
            early skip of rewriting module: django.db.migrations.loader [assertion]
            early skip of rewriting module: django.db.migrations.graph [assertion]
            early skip of rewriting module: django.db.migrations.recorder [assertion]
            early skip of rewriting module: django.db.migrations.executor [assertion]
            early skip of rewriting module: django.contrib.admin.management [assertion]
            early skip of rewriting module: django.contrib.sessions.management [assertion]
            early skip of rewriting module: django.contrib.sessions.management [assertion]
            early skip of rewriting module: django.contrib.messages.management [assertion]
            early skip of rewriting module: django.contrib.staticfiles.management [assertion]
            early skip of rewriting module: django.contrib.staticfiles.management [assertion]
            early skip of rewriting module: rest_framework.management [assertion]
            early skip of rewriting module: rest_framework.management [assertion]
            early skip of rewriting module: pets.management [assertion]
            early skip of rewriting module: traits.management [assertion]
            early skip of rewriting module: groups.management [assertion]
            early skip of rewriting module: django.contrib.admin.migrations [assertion]
            early skip of rewriting module: django.contrib.admin.migrations.0003_logentry_add_action_flag_choices [assertion]
            early skip of rewriting module: django.contrib.admin.migrations.0002_logentry_remove_auto_add [assertion]
            early skip of rewriting module: django.contrib.admin.migrations.0001_initial [assertion]
            early skip of rewriting module: django.contrib.auth.migrations [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0007_alter_validators_add_error_messages [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0008_alter_user_username_max_length [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0003_alter_user_email_max_length [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0010_alter_group_name_max_length [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0009_alter_user_last_name_max_length [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0001_initial [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0004_alter_user_username_opts [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0005_alter_user_last_login_null [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0011_update_proxy_permissions [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0002_alter_permission_name_max_length [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0006_require_contenttypes_0002 [assertion]
            early skip of rewriting module: django.contrib.auth.migrations.0012_alter_user_first_name_max_length [assertion]
            early skip of rewriting module: django.contrib.contenttypes.migrations [assertion]
            early skip of rewriting module: django.contrib.contenttypes.migrations.0002_remove_content_type_name [assertion]
            early skip of rewriting module: django.contrib.contenttypes.migrations.0001_initial [assertion]
            early skip of rewriting module: django.contrib.sessions.migrations [assertion]
            early skip of rewriting module: django.contrib.sessions.migrations.0001_initial [assertion]
            early skip of rewriting module: django.contrib.messages.migrations [assertion]
            early skip of rewriting module: django.contrib.staticfiles.migrations [assertion]
            early skip of rewriting module: rest_framework.migrations [assertion]
            early skip of rewriting module: pets.migrations [assertion]
            early skip of rewriting module: pets.migrations.0001_initial [assertion]
            early skip of rewriting module: traits.migrations [assertion]
            early skip of rewriting module: traits.migrations.0001_initial [assertion]
            early skip of rewriting module: groups.migrations [assertion]
            early skip of rewriting module: groups.migrations.0001_initial [assertion]
            early skip of rewriting module: django.db.models.sql.compiler [assertion]
            early skip of rewriting module: django.core.serializers.xml_serializer [assertion]
            early skip of rewriting module: xml.dom.pulldom [assertion]
            early skip of rewriting module: xml.sax [assertion]
            early skip of rewriting module: xml.sax.xmlreader [assertion]
            early skip of rewriting module: xml.sax.handler [assertion]
            early skip of rewriting module: xml.sax._exceptions [assertion]
            early skip of rewriting module: xml.sax.expatreader [assertion]
            early skip of rewriting module: xml.parsers [assertion]
            early skip of rewriting module: xml.parsers.expat [assertion]
            early skip of rewriting module: xml.sax.saxutils [assertion]
            early skip of rewriting module: django.utils.xmlutils [assertion]
            early skip of rewriting module: django.core.serializers.pyyaml [assertion]
            early skip of rewriting module: yaml [assertion]
            early skip of rewriting module: django.core.serializers.jsonl [assertion]
            early skip of rewriting module: django.contrib.admin.migrations [assertion]
            early skip of rewriting module: django.contrib.auth.migrations [assertion]
            early skip of rewriting module: django.contrib.contenttypes.migrations [assertion]
            early skip of rewriting module: django.contrib.sessions.migrations [assertion]
            early skip of rewriting module: django.contrib.messages.migrations [assertion]
            early skip of rewriting module: django.contrib.staticfiles.migrations [assertion]
            early skip of rewriting module: rest_framework.migrations [assertion]
            early skip of rewriting module: pets.migrations [assertion]
            early skip of rewriting module: traits.migrations [assertion]
            early skip of rewriting module: groups.migrations [assertion]
            early skip of rewriting module: django.core.management.commands.createcachetable [assertion]
            early skip of rewriting module: django.core.cache.backends.db [assertion]
            early skip of rewriting module: django.core.cache.backends.locmem [assertion]
            finish pytest_fixture_setup --> None [hook]
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_GroupModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::GroupModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_GroupModelTest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_field_created_at_properties>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            nextitem: <TestCaseFunction test_field_scientific_name_properties>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_created_at_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 22, 'GroupModelTest.test_field_created_at_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_field_scientific_name_properties>
          nextitem: <TestCaseFunction test_field_created_at_properties>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 10, 'GroupModelTest.test_field_scientific_name_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_field_scientific_name_properties>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_scientific_name_properties>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_field_scientific_name_properties>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_scientific_name_properties>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_field_scientific_name_properties>
            nextitem: <TestCaseFunction test_field_created_at_properties>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_GroupModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::GroupModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_GroupModelTest' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_GroupModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::GroupModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_GroupModelTest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_scientific_name_properties>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::GroupModelTest::test_field_scientific_name_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 10, 'GroupModelTest.test_field_scientific_name_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_field_created_at_properties>
          nextitem: <TestCaseFunction test_field_name_properties>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 43, 'TraitModelTest.test_field_created_at_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_field_created_at_properties>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TraitModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::TraitModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_TraitModelTest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_field_created_at_properties>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=4>>
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            nextitem: <TestCaseFunction test_field_name_properties>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_created_at_properties>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 43, 'TraitModelTest.test_field_created_at_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_field_name_properties>
          nextitem: <TestCaseFunction test_field_name_properties>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 36, 'TraitModelTest.test_field_name_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_field_name_properties>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_field_name_properties>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='call' excinfo=<ExceptionInfo FieldDoesNotExist("Trait has no field named 'name'") tblen=2>>
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_field_name_properties>
            nextitem: <TestCaseFunction test_field_name_properties>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TraitModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::TraitModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_TraitModelTest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TraitModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::TraitModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_TraitModelTest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 36, 'TraitModelTest.test_field_name_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_field_name_properties>
          nextitem: <TestCaseFunction test_field_sex_properties>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 56, 'PetModelTest.test_field_name_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_field_name_properties>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetModelTest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_field_name_properties>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_field_name_properties>
            nextitem: <TestCaseFunction test_field_sex_properties>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_name_properties>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_name_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 56, 'PetModelTest.test_field_name_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_field_sex_properties>
          nextitem: <TestCaseFunction test_if_a_group_can_have_many_pets>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 63, 'PetModelTest.test_field_sex_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_field_sex_properties>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_sex_properties>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_field_sex_properties>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_sex_properties>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_field_sex_properties>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("('Female', 'Female') not found in [('Male', 'Male'), ('Famale', 'Famale'), ('Not Informed', 'Not Informed')] : Verifique se o campo 'sex' possui a choice 'Female'") tblen=1>>
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_field_sex_properties>
            nextitem: <TestCaseFunction test_if_a_group_can_have_many_pets>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetModelTest' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetModelTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetModelTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetModelTest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_field_sex_properties>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties
            location: ('tests/tarefas/tarefa_1/test_models.py', 63, 'PetModelTest.test_field_sex_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_if_a_group_can_have_many_pets>
          nextitem: <TestCaseFunction test_if_a_group_deletion_is_protected>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets
            location: ('tests/tarefas/tarefa_1/test_models.py', 99, 'PetGroupRelationTest.test_if_a_group_can_have_many_pets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_if_a_group_can_have_many_pets>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetGroupRelationTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetGroupRelationTest' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_a_group_can_have_many_pets>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_if_a_group_can_have_many_pets>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_a_group_can_have_many_pets>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_if_a_group_can_have_many_pets>
            nextitem: <TestCaseFunction test_if_a_group_deletion_is_protected>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_a_group_can_have_many_pets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_can_have_many_pets
            location: ('tests/tarefas/tarefa_1/test_models.py', 99, 'PetGroupRelationTest.test_if_a_group_can_have_many_pets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_if_a_group_deletion_is_protected>
          nextitem: <TestCaseFunction test_if_trait_can_have_many_pets>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected
            location: ('tests/tarefas/tarefa_1/test_models.py', 107, 'PetGroupRelationTest.test_if_a_group_deletion_is_protected')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_if_a_group_deletion_is_protected>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_a_group_deletion_is_protected>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_if_a_group_deletion_is_protected>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_a_group_deletion_is_protected>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_if_a_group_deletion_is_protected>
            call: <CallInfo when='call' excinfo=<ExceptionInfo RestrictedError("Cannot delete some instances of model 'Group' because they are referenced through restricted foreign ...", {<Pet: Pet object (1)>, <Pet: Pet object (2)>, <Pet: Pet object (3)>, <Pet: Pet object (4)>, <Pet: Pet object (5)>}) tblen=3>>
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_if_a_group_deletion_is_protected>
            nextitem: <TestCaseFunction test_if_trait_can_have_many_pets>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetGroupRelationTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetGroupRelationTest' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetGroupRelationTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetGroupRelationTest' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_a_group_deletion_is_protected>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected
            location: ('tests/tarefas/tarefa_1/test_models.py', 107, 'PetGroupRelationTest.test_if_a_group_deletion_is_protected')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_if_trait_can_have_many_pets>
          nextitem: <TestCaseFunction test_can_create_pet>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets
            location: ('tests/tarefas/tarefa_1/test_models.py', 128, 'PetTraitRelationTest.test_if_trait_can_have_many_pets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_if_trait_can_have_many_pets>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetTraitRelationTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetTraitRelationTest' for <TestCaseFunction test_if_trait_can_have_many_pets>>
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_trait_can_have_many_pets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=38>>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='setup' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='setup' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='setup' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('error', 'E', 'ERROR') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_if_trait_can_have_many_pets>
            call: <CallInfo when='setup' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=5>>
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='setup' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_if_trait_can_have_many_pets>
            nextitem: <TestCaseFunction test_can_create_pet>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetTraitRelationTest' scope='class' baseid='tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetTraitRelationTest' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_if_trait_can_have_many_pets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets
            location: ('tests/tarefas/tarefa_1/test_models.py', 128, 'PetTraitRelationTest.test_if_trait_can_have_many_pets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_create_pet>
          nextitem: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet
            location: ('tests/tarefas/tarefa_3/test_views.py', 117, 'PetViewsTest.test_can_create_pet')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_create_pet>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetViewsTest' scope='class' baseid='tests/tarefas/tarefa_3/test_views.py::PetViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetViewsTest' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_create_pet>
        early skip of rewriting module: django.middleware.clickjacking [assertion]
        early skip of rewriting module: django.contrib.messages.middleware [assertion]
        early skip of rewriting module: django.contrib.auth.middleware [assertion]
        early skip of rewriting module: django.contrib.auth.backends [assertion]
        early skip of rewriting module: django.middleware.common [assertion]
        early skip of rewriting module: django.contrib.sessions.middleware [assertion]
        early skip of rewriting module: django.contrib.sessions.backends [assertion]
        early skip of rewriting module: django.contrib.sessions.backends.base [assertion]
        early skip of rewriting module: django.contrib.sessions.exceptions [assertion]
        early skip of rewriting module: django.contrib.sessions.backends.db [assertion]
        early skip of rewriting module: django.middleware.security [assertion]
        early skip of rewriting module: django.contrib.sessions.serializers [assertion]
        early skip of rewriting module: django.contrib.messages.storage.fallback [assertion]
        early skip of rewriting module: django.contrib.messages.storage.cookie [assertion]
        early skip of rewriting module: django.contrib.messages.storage.session [assertion]
        early skip of rewriting module: pet_kare.urls [assertion]
        early skip of rewriting module: django.contrib.contenttypes.views [assertion]
        early skip of rewriting module: pets.urls [assertion]
        early skip of rewriting module: pets.views [assertion]
        early skip of rewriting module: rest_framework.pagination [assertion]
        early skip of rewriting module: rest_framework.response [assertion]
        early skip of rewriting module: pets.serializers_pets [assertion]
        early skip of rewriting module: groups.serializers_groups [assertion]
        early skip of rewriting module: traits.serializers_traits [assertion]
        early skip of rewriting module: rest_framework.views [assertion]
        early skip of rewriting module: rest_framework.schemas [assertion]
        early skip of rewriting module: rest_framework.schemas.coreapi [assertion]
        early skip of rewriting module: rest_framework.schemas.generators [assertion]
        early skip of rewriting module: django.contrib.admindocs [assertion]
        early skip of rewriting module: django.contrib.admindocs.views [assertion]
        early skip of rewriting module: django.contrib.admin.views.decorators [assertion]
        early skip of rewriting module: django.contrib.auth.decorators [assertion]
        early skip of rewriting module: django.shortcuts [assertion]
        early skip of rewriting module: django.contrib.admindocs.utils [assertion]
        early skip of rewriting module: docutils [assertion]
        early skip of rewriting module: rest_framework.schemas.inspectors [assertion]
        early skip of rewriting module: rest_framework.schemas.utils [assertion]
        early skip of rewriting module: rest_framework.mixins [assertion]
        early skip of rewriting module: rest_framework.schemas.openapi [assertion]
        early skip of rewriting module: rest_framework.authentication [assertion]
        early skip of rewriting module: rest_framework.permissions [assertion]
        early skip of rewriting module: rest_framework.parsers [assertion]
        early skip of rewriting module: rest_framework.negotiation [assertion]
        early skip of rewriting module: rest_framework.utils.mediatypes [assertion]
        early skip of rewriting module: rest_framework.metadata [assertion]
        early skip of rewriting module: ipdb [assertion]
        early skip of rewriting module: ipdb.__main__ [assertion]
        early skip of rewriting module: decorator [assertion]
        early skip of rewriting module: IPython [assertion]
        early skip of rewriting module: IPython.core [assertion]
        early skip of rewriting module: IPython.core.getipython [assertion]
        early skip of rewriting module: IPython.core.release [assertion]
        early skip of rewriting module: IPython.core.application [assertion]
        early skip of rewriting module: traitlets [assertion]
        early skip of rewriting module: traitlets.traitlets [assertion]
        early skip of rewriting module: traitlets.utils [assertion]
        early skip of rewriting module: traitlets.utils.bunch [assertion]
        early skip of rewriting module: traitlets.utils.descriptions [assertion]
        early skip of rewriting module: traitlets.utils.getargspec [assertion]
        early skip of rewriting module: traitlets.utils.importstring [assertion]
        early skip of rewriting module: traitlets.utils.sentinel [assertion]
        early skip of rewriting module: traitlets._version [assertion]
        early skip of rewriting module: traitlets.utils.decorators [assertion]
        early skip of rewriting module: traitlets.config [assertion]
        early skip of rewriting module: traitlets.config.application [assertion]
        early skip of rewriting module: traitlets.config.configurable [assertion]
        early skip of rewriting module: traitlets.utils.text [assertion]
        early skip of rewriting module: traitlets.config.loader [assertion]
        early skip of rewriting module: traitlets.utils.nested_update [assertion]
        early skip of rewriting module: IPython.core.crashhandler [assertion]
        early skip of rewriting module: IPython.core.ultratb [assertion]
        early skip of rewriting module: pydoc [assertion]
        early skip of rewriting module: stack_data [assertion]
        early skip of rewriting module: stack_data.core [assertion]
        early skip of rewriting module: executing [assertion]
        early skip of rewriting module: executing.executing [assertion]
        early skip of rewriting module: executing._position_node_finder [assertion]
        early skip of rewriting module: executing._exceptions [assertion]
        early skip of rewriting module: executing.version [assertion]
        early skip of rewriting module: asttokens [assertion]
        early skip of rewriting module: asttokens.line_numbers [assertion]
        early skip of rewriting module: asttokens.asttokens [assertion]
        early skip of rewriting module: six [assertion]
        early skip of rewriting module: six.moves [assertion]
        early skip of rewriting module: asttokens.util [assertion]
        early skip of rewriting module: pure_eval [assertion]
        early skip of rewriting module: pure_eval.core [assertion]
        early skip of rewriting module: pure_eval.my_getattr_static [assertion]
        early skip of rewriting module: pure_eval.utils [assertion]
        early skip of rewriting module: pure_eval.version [assertion]
        early skip of rewriting module: stack_data.utils [assertion]
        early skip of rewriting module: stack_data.formatting [assertion]
        early skip of rewriting module: stack_data.serializing [assertion]
        early skip of rewriting module: stack_data.version [assertion]
        early skip of rewriting module: pygments.formatters.terminal256 [assertion]
        early skip of rewriting module: pygments.console [assertion]
        early skip of rewriting module: pygments.style [assertion]
        early skip of rewriting module: IPython.core.debugger [assertion]
        early skip of rewriting module: IPython.utils [assertion]
        early skip of rewriting module: IPython.utils.PyColorize [assertion]
        early skip of rewriting module: IPython.utils.coloransi [assertion]
        early skip of rewriting module: IPython.utils.ipstruct [assertion]
        early skip of rewriting module: IPython.utils.colorable [assertion]
        early skip of rewriting module: IPython.utils.py3compat [assertion]
        early skip of rewriting module: IPython.utils.encoding [assertion]
        early skip of rewriting module: IPython.core.excolors [assertion]
        early skip of rewriting module: IPython.core.display_trap [assertion]
        early skip of rewriting module: IPython.utils.path [assertion]
        early skip of rewriting module: IPython.utils.process [assertion]
        early skip of rewriting module: IPython.utils._process_posix [assertion]
        early skip of rewriting module: pexpect [assertion]
        early skip of rewriting module: pexpect.exceptions [assertion]
        early skip of rewriting module: pexpect.utils [assertion]
        early skip of rewriting module: pexpect.expect [assertion]
        early skip of rewriting module: pexpect.pty_spawn [assertion]
        early skip of rewriting module: pty [assertion]
        early skip of rewriting module: tty [assertion]
        early skip of rewriting module: ptyprocess [assertion]
        early skip of rewriting module: ptyprocess.ptyprocess [assertion]
        early skip of rewriting module: resource [assertion]
        early skip of rewriting module: ptyprocess.util [assertion]
        early skip of rewriting module: pexpect.spawnbase [assertion]
        early skip of rewriting module: pexpect.run [assertion]
        early skip of rewriting module: IPython.utils._process_common [assertion]
        early skip of rewriting module: IPython.utils.terminal [assertion]
        early skip of rewriting module: IPython.utils.sysinfo [assertion]
        early skip of rewriting module: IPython.utils._sysinfo [assertion]
        early skip of rewriting module: IPython.core.profiledir [assertion]
        early skip of rewriting module: IPython.paths [assertion]
        early skip of rewriting module: IPython.utils.importstring [assertion]
        early skip of rewriting module: IPython.terminal [assertion]
        early skip of rewriting module: IPython.terminal.embed [assertion]
        early skip of rewriting module: IPython.core.compilerop [assertion]
        early skip of rewriting module: IPython.core.magic_arguments [assertion]
        early skip of rewriting module: IPython.core.error [assertion]
        early skip of rewriting module: IPython.utils.decorators [assertion]
        early skip of rewriting module: IPython.utils.docs [assertion]
        early skip of rewriting module: IPython.utils.text [assertion]
        early skip of rewriting module: IPython.core.magic [assertion]
        early skip of rewriting module: getopt [assertion]
        early skip of rewriting module: IPython.core.oinspect [assertion]
        early skip of rewriting module: IPython.core.page [assertion]
        early skip of rewriting module: IPython.display [assertion]
        early skip of rewriting module: IPython.core.display_functions [assertion]
        early skip of rewriting module: IPython.core.display [assertion]
        early skip of rewriting module: IPython.testing [assertion]
        early skip of rewriting module: IPython.testing.skipdoctest [assertion]
        early skip of rewriting module: IPython.lib [assertion]
        early skip of rewriting module: IPython.lib.display [assertion]
        early skip of rewriting module: IPython.utils.data [assertion]
        early skip of rewriting module: IPython.lib.pretty [assertion]
        early skip of rewriting module: IPython.utils.openpy [assertion]
        early skip of rewriting module: IPython.utils.dir2 [assertion]
        early skip of rewriting module: IPython.utils.wildcard [assertion]
        early skip of rewriting module: pygments.lexers.python [assertion]
        early skip of rewriting module: pygments.unistring [assertion]
        early skip of rewriting module: IPython.core.inputtransformer2 [assertion]
        early skip of rewriting module: IPython.core.interactiveshell [assertion]
        early skip of rewriting module: runpy [assertion]
        early skip of rewriting module: pickleshare [assertion]
        early skip of rewriting module: cPickle [assertion]
        early skip of rewriting module: IPython.core.hooks [assertion]
        early skip of rewriting module: IPython.core.prefilter [assertion]
        early skip of rewriting module: IPython.core.autocall [assertion]
        early skip of rewriting module: IPython.core.macro [assertion]
        early skip of rewriting module: IPython.core.splitinput [assertion]
        early skip of rewriting module: IPython.core.alias [assertion]
        early skip of rewriting module: IPython.core.builtin_trap [assertion]
        early skip of rewriting module: IPython.core.displayhook [assertion]
        early skip of rewriting module: IPython.core.displaypub [assertion]
        early skip of rewriting module: IPython.core.events [assertion]
        early skip of rewriting module: backcall [assertion]
        early skip of rewriting module: backcall.backcall [assertion]
        early skip of rewriting module: IPython.core.extensions [assertion]
        early skip of rewriting module: IPython.core.formatters [assertion]
        early skip of rewriting module: IPython.utils.sentinel [assertion]
        early skip of rewriting module: IPython.core.history [assertion]
        early skip of rewriting module: IPython.core.logger [assertion]
        early skip of rewriting module: IPython.core.payload [assertion]
        early skip of rewriting module: IPython.core.usage [assertion]
        early skip of rewriting module: IPython.utils.io [assertion]
        early skip of rewriting module: IPython.utils.capture [assertion]
        early skip of rewriting module: IPython.utils.strdispatch [assertion]
        early skip of rewriting module: IPython.utils.syspathcontext [assertion]
        early skip of rewriting module: docrepr [assertion]
        early skip of rewriting module: IPython.core.async_helpers [assertion]
        early skip of rewriting module: IPython.terminal.interactiveshell [assertion]
        early skip of rewriting module: prompt_toolkit [assertion]
        early skip of rewriting module: prompt_toolkit.application [assertion]
        early skip of rewriting module: prompt_toolkit.application.application [assertion]
        early skip of rewriting module: prompt_toolkit.buffer [assertion]
        early skip of rewriting module: prompt_toolkit.application.current [assertion]
        early skip of rewriting module: prompt_toolkit.application.run_in_terminal [assertion]
        early skip of rewriting module: prompt_toolkit.eventloop [assertion]
        early skip of rewriting module: prompt_toolkit.eventloop.async_generator [assertion]
        early skip of rewriting module: prompt_toolkit.eventloop.async_context_manager [assertion]
        early skip of rewriting module: prompt_toolkit.eventloop.utils [assertion]
        early skip of rewriting module: prompt_toolkit.eventloop.inputhook [assertion]
        early skip of rewriting module: prompt_toolkit.auto_suggest [assertion]
        early skip of rewriting module: prompt_toolkit.document [assertion]
        early skip of rewriting module: prompt_toolkit.clipboard [assertion]
        early skip of rewriting module: prompt_toolkit.clipboard.base [assertion]
        early skip of rewriting module: prompt_toolkit.selection [assertion]
        early skip of rewriting module: prompt_toolkit.clipboard.in_memory [assertion]
        early skip of rewriting module: prompt_toolkit.filters [assertion]
        early skip of rewriting module: prompt_toolkit.filters.app [assertion]
        early skip of rewriting module: prompt_toolkit.cache [assertion]
        early skip of rewriting module: prompt_toolkit.enums [assertion]
        early skip of rewriting module: prompt_toolkit.filters.base [assertion]
        early skip of rewriting module: prompt_toolkit.filters.cli [assertion]
        early skip of rewriting module: prompt_toolkit.filters.utils [assertion]
        early skip of rewriting module: prompt_toolkit.completion [assertion]
        early skip of rewriting module: prompt_toolkit.completion.base [assertion]
        early skip of rewriting module: prompt_toolkit.formatted_text [assertion]
        early skip of rewriting module: prompt_toolkit.formatted_text.ansi [assertion]
        early skip of rewriting module: prompt_toolkit.output [assertion]
        early skip of rewriting module: prompt_toolkit.output.base [assertion]
        early skip of rewriting module: prompt_toolkit.cursor_shapes [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.key_bindings [assertion]
        early skip of rewriting module: prompt_toolkit.keys [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.key_processor [assertion]
        early skip of rewriting module: prompt_toolkit.utils [assertion]
        early skip of rewriting module: wcwidth [assertion]
        early skip of rewriting module: wcwidth.wcwidth [assertion]
        early skip of rewriting module: wcwidth.table_wide [assertion]
        early skip of rewriting module: wcwidth.table_zero [assertion]
        early skip of rewriting module: wcwidth.unicode_versions [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.vi_state [assertion]
        early skip of rewriting module: prompt_toolkit.data_structures [assertion]
        early skip of rewriting module: prompt_toolkit.styles [assertion]
        early skip of rewriting module: prompt_toolkit.styles.base [assertion]
        early skip of rewriting module: prompt_toolkit.styles.defaults [assertion]
        early skip of rewriting module: prompt_toolkit.styles.named_colors [assertion]
        early skip of rewriting module: prompt_toolkit.styles.style [assertion]
        early skip of rewriting module: prompt_toolkit.styles.pygments [assertion]
        early skip of rewriting module: prompt_toolkit.styles.style_transformation [assertion]
        early skip of rewriting module: colorsys [assertion]
        early skip of rewriting module: prompt_toolkit.output.color_depth [assertion]
        early skip of rewriting module: prompt_toolkit.output.defaults [assertion]
        early skip of rewriting module: prompt_toolkit.output.plain_text [assertion]
        early skip of rewriting module: prompt_toolkit.output.flush_stdout [assertion]
        early skip of rewriting module: prompt_toolkit.output.vt100 [assertion]
        early skip of rewriting module: prompt_toolkit.formatted_text.base [assertion]
        early skip of rewriting module: prompt_toolkit.mouse_events [assertion]
        early skip of rewriting module: prompt_toolkit.formatted_text.html [assertion]
        early skip of rewriting module: prompt_toolkit.formatted_text.pygments [assertion]
        early skip of rewriting module: prompt_toolkit.formatted_text.utils [assertion]
        early skip of rewriting module: prompt_toolkit.completion.deduplicate [assertion]
        early skip of rewriting module: prompt_toolkit.completion.filesystem [assertion]
        early skip of rewriting module: prompt_toolkit.completion.fuzzy_completer [assertion]
        early skip of rewriting module: prompt_toolkit.completion.word_completer [assertion]
        early skip of rewriting module: prompt_toolkit.completion.nested [assertion]
        early skip of rewriting module: prompt_toolkit.history [assertion]
        early skip of rewriting module: prompt_toolkit.search [assertion]
        early skip of rewriting module: prompt_toolkit.validation [assertion]
        early skip of rewriting module: prompt_toolkit.input [assertion]
        early skip of rewriting module: prompt_toolkit.input.base [assertion]
        early skip of rewriting module: prompt_toolkit.input.defaults [assertion]
        early skip of rewriting module: prompt_toolkit.input.typeahead [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.page_navigation [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.scroll [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.defaults [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.basic [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.named_commands [assertion]
        early skip of rewriting module: prompt_toolkit.layout [assertion]
        early skip of rewriting module: prompt_toolkit.layout.containers [assertion]
        early skip of rewriting module: prompt_toolkit.layout.controls [assertion]
        early skip of rewriting module: prompt_toolkit.lexers [assertion]
        early skip of rewriting module: prompt_toolkit.lexers.base [assertion]
        early skip of rewriting module: prompt_toolkit.lexers.pygments [assertion]
        early skip of rewriting module: prompt_toolkit.layout.processors [assertion]
        early skip of rewriting module: prompt_toolkit.layout.utils [assertion]
        early skip of rewriting module: prompt_toolkit.layout.dimension [assertion]
        early skip of rewriting module: prompt_toolkit.layout.margins [assertion]
        early skip of rewriting module: prompt_toolkit.layout.mouse_handlers [assertion]
        early skip of rewriting module: prompt_toolkit.layout.screen [assertion]
        early skip of rewriting module: prompt_toolkit.layout.layout [assertion]
        early skip of rewriting module: prompt_toolkit.layout.menus [assertion]
        early skip of rewriting module: prompt_toolkit.layout.scrollable_pane [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.completion [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.cpr [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.emacs [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.mouse [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.vi [assertion]
        early skip of rewriting module: prompt_toolkit.input.vt100_parser [assertion]
        early skip of rewriting module: prompt_toolkit.input.ansi_escape_sequences [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.digraphs [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.emacs_state [assertion]
        early skip of rewriting module: prompt_toolkit.layout.dummy [assertion]
        early skip of rewriting module: prompt_toolkit.renderer [assertion]
        early skip of rewriting module: prompt_toolkit.application.dummy [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts.dialogs [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.focus [assertion]
        early skip of rewriting module: prompt_toolkit.widgets [assertion]
        early skip of rewriting module: prompt_toolkit.widgets.base [assertion]
        early skip of rewriting module: prompt_toolkit.widgets.toolbars [assertion]
        early skip of rewriting module: prompt_toolkit.widgets.dialogs [assertion]
        early skip of rewriting module: prompt_toolkit.widgets.menus [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts.progress_bar [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts.progress_bar.base [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts.progress_bar.formatters [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts.prompt [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.auto_suggest [assertion]
        early skip of rewriting module: prompt_toolkit.key_binding.bindings.open_in_editor [assertion]
        early skip of rewriting module: prompt_toolkit.shortcuts.utils [assertion]
        early skip of rewriting module: prompt_toolkit.patch_stdout [assertion]
        early skip of rewriting module: IPython.terminal.debugger [assertion]
        early skip of rewriting module: IPython.core.completer [assertion]
        early skip of rewriting module: IPython.core.guarded_eval [assertion]
        early skip of rewriting module: IPython.core.latex_symbols [assertion]
        early skip of rewriting module: IPython.utils.generics [assertion]
        early skip of rewriting module: jedi [assertion]
        early skip of rewriting module: jedi.api [assertion]
        early skip of rewriting module: parso [assertion]
        early skip of rewriting module: parso.parser [assertion]
        early skip of rewriting module: parso.tree [assertion]
        early skip of rewriting module: parso.utils [assertion]
        early skip of rewriting module: parso.pgen2 [assertion]
        early skip of rewriting module: parso.pgen2.generator [assertion]
        early skip of rewriting module: parso.pgen2.grammar_parser [assertion]
        early skip of rewriting module: parso.python [assertion]
        early skip of rewriting module: parso.python.tokenize [assertion]
        early skip of rewriting module: parso.python.token [assertion]
        early skip of rewriting module: parso.grammar [assertion]
        early skip of rewriting module: parso._compatibility [assertion]
        early skip of rewriting module: parso.python.diff [assertion]
        early skip of rewriting module: parso.python.parser [assertion]
        early skip of rewriting module: parso.python.tree [assertion]
        early skip of rewriting module: parso.python.prefix [assertion]
        early skip of rewriting module: parso.cache [assertion]
        early skip of rewriting module: parso.python.errors [assertion]
        early skip of rewriting module: parso.normalizer [assertion]
        early skip of rewriting module: parso.python.pep8 [assertion]
        early skip of rewriting module: parso.file_io [assertion]
        early skip of rewriting module: jedi.parser_utils [assertion]
        early skip of rewriting module: jedi.debug [assertion]
        early skip of rewriting module: colorama [assertion]
        early skip of rewriting module: jedi.settings [assertion]
        early skip of rewriting module: jedi.cache [assertion]
        early skip of rewriting module: jedi.file_io [assertion]
        early skip of rewriting module: jedi.api.classes [assertion]
        early skip of rewriting module: jedi.inference [assertion]
        early skip of rewriting module: jedi.inference.imports [assertion]
        early skip of rewriting module: jedi.inference.sys_path [assertion]
        early skip of rewriting module: jedi.inference.cache [assertion]
        early skip of rewriting module: jedi.inference.base_value [assertion]
        early skip of rewriting module: jedi.inference.helpers [assertion]
        early skip of rewriting module: jedi.inference.utils [assertion]
        early skip of rewriting module: jedi.inference.compiled [assertion]
        early skip of rewriting module: jedi.inference.compiled.value [assertion]
        early skip of rewriting module: jedi.inference.filters [assertion]
        early skip of rewriting module: jedi.inference.flow_analysis [assertion]
        early skip of rewriting module: jedi.inference.recursion [assertion]
        early skip of rewriting module: jedi.inference.names [assertion]
        early skip of rewriting module: jedi.inference.docstrings [assertion]
        early skip of rewriting module: jedi.inference.lazy_value [assertion]
        early skip of rewriting module: jedi.common [assertion]
        early skip of rewriting module: jedi.plugins [assertion]
        early skip of rewriting module: jedi.inference.compiled.access [assertion]
        early skip of rewriting module: jedi.inference.compiled.getattr_static [assertion]
        early skip of rewriting module: jedi.inference.signature [assertion]
        early skip of rewriting module: jedi.inference.context [assertion]
        early skip of rewriting module: jedi.inference.analysis [assertion]
        early skip of rewriting module: jedi.inference.gradual [assertion]
        early skip of rewriting module: jedi.inference.gradual.typeshed [assertion]
        early skip of rewriting module: jedi.inference.gradual.stub_value [assertion]
        early skip of rewriting module: jedi.inference.value [assertion]
        early skip of rewriting module: jedi.inference.value.module [assertion]
        early skip of rewriting module: jedi.inference.value.klass [assertion]
        early skip of rewriting module: jedi.inference.arguments [assertion]
        early skip of rewriting module: jedi.inference.value.iterable [assertion]
        early skip of rewriting module: jedi.inference.value.dynamic_arrays [assertion]
        early skip of rewriting module: jedi.inference.value.function [assertion]
        early skip of rewriting module: jedi.inference.parser_cache [assertion]
        early skip of rewriting module: jedi.inference.gradual.generics [assertion]
        early skip of rewriting module: jedi.inference.value.instance [assertion]
        early skip of rewriting module: jedi.inference.gradual.typing [assertion]
        early skip of rewriting module: jedi.inference.gradual.base [assertion]
        early skip of rewriting module: jedi.inference.gradual.type_var [assertion]
        early skip of rewriting module: jedi.inference.compiled.subprocess [assertion]
        early skip of rewriting module: jedi._compatibility [assertion]
        early skip of rewriting module: jedi.inference.compiled.subprocess.functions [assertion]
        early skip of rewriting module: jedi.api.exceptions [assertion]
        early skip of rewriting module: jedi.inference.syntax_tree [assertion]
        early skip of rewriting module: jedi.inference.gradual.annotation [assertion]
        early skip of rewriting module: jedi.inference.param [assertion]
        early skip of rewriting module: jedi.inference.value.decorator [assertion]
        early skip of rewriting module: jedi.inference.compiled.mixed [assertion]
        early skip of rewriting module: jedi.inference.gradual.conversion [assertion]
        early skip of rewriting module: jedi.api.keywords [assertion]
        early skip of rewriting module: pydoc_data [assertion]
        early skip of rewriting module: pydoc_data.topics [assertion]
        early skip of rewriting module: jedi.api.completion_cache [assertion]
        early skip of rewriting module: jedi.api.helpers [assertion]
        early skip of rewriting module: jedi.api.interpreter [assertion]
        early skip of rewriting module: jedi.api.completion [assertion]
        early skip of rewriting module: jedi.api.strings [assertion]
        early skip of rewriting module: jedi.api.file_name [assertion]
        early skip of rewriting module: jedi.inference.docstring_utils [assertion]
        early skip of rewriting module: jedi.api.environment [assertion]
        early skip of rewriting module: filecmp [assertion]
        early skip of rewriting module: jedi.api.project [assertion]
        early skip of rewriting module: jedi.inference.references [assertion]
        early skip of rewriting module: jedi.api.errors [assertion]
        early skip of rewriting module: jedi.api.refactoring [assertion]
        early skip of rewriting module: jedi.api.refactoring.extract [assertion]
        early skip of rewriting module: jedi.inference.gradual.utils [assertion]
        early skip of rewriting module: jedi.plugins.registry [assertion]
        early skip of rewriting module: jedi.plugins.stdlib [assertion]
        early skip of rewriting module: jedi.plugins.flask [assertion]
        early skip of rewriting module: jedi.plugins.pytest [assertion]
        early skip of rewriting module: jedi.plugins.django [assertion]
        early skip of rewriting module: IPython.terminal.ptutils [assertion]
        early skip of rewriting module: IPython.terminal.shortcuts [assertion]
        early skip of rewriting module: IPython.terminal.shortcuts.auto_match [assertion]
        early skip of rewriting module: IPython.terminal.shortcuts.auto_suggest [assertion]
        early skip of rewriting module: IPython.utils.tokenutil [assertion]
        early skip of rewriting module: IPython.terminal.magics [assertion]
        early skip of rewriting module: IPython.lib.clipboard [assertion]
        early skip of rewriting module: IPython.terminal.pt_inputhooks [assertion]
        early skip of rewriting module: IPython.terminal.prompts [assertion]
        early skip of rewriting module: IPython.terminal.ipapp [assertion]
        early skip of rewriting module: IPython.core.magics [assertion]
        early skip of rewriting module: IPython.core.magics.auto [assertion]
        early skip of rewriting module: IPython.core.magics.basic [assertion]
        early skip of rewriting module: IPython.core.magics.code [assertion]
        early skip of rewriting module: IPython.utils.contexts [assertion]
        early skip of rewriting module: IPython.core.magics.config [assertion]
        early skip of rewriting module: IPython.core.magics.display [assertion]
        early skip of rewriting module: IPython.core.magics.execution [assertion]
        early skip of rewriting module: cProfile [assertion]
        early skip of rewriting module: _lsprof [assertion]
        early skip of rewriting module: profile [assertion]
        early skip of rewriting module: pstats [assertion]
        early skip of rewriting module: timeit [assertion]
        early skip of rewriting module: IPython.utils.module_paths [assertion]
        early skip of rewriting module: IPython.utils.timing [assertion]
        early skip of rewriting module: IPython.core.magics.extension [assertion]
        early skip of rewriting module: IPython.core.magics.history [assertion]
        early skip of rewriting module: IPython.core.magics.logging [assertion]
        early skip of rewriting module: IPython.core.magics.namespace [assertion]
        early skip of rewriting module: IPython.core.magics.osm [assertion]
        early skip of rewriting module: IPython.core.magics.packaging [assertion]
        early skip of rewriting module: IPython.core.magics.pylab [assertion]
        early skip of rewriting module: IPython.core.pylabtools [assertion]
        early skip of rewriting module: IPython.core.magics.script [assertion]
        early skip of rewriting module: IPython.core.shellapp [assertion]
        early skip of rewriting module: IPython.extensions [assertion]
        early skip of rewriting module: IPython.extensions.storemagic [assertion]
        early skip of rewriting module: IPython.utils.frame [assertion]
        early skip of rewriting module: configparser [assertion]
        early skip of rewriting module: ipdb.stdout [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_create_pet>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("{'id'[40 chars]ht': 20.0, 'sex': 'Male', 'group': {'id': 1, '[252 chars]Z'}]} != {'id'[40 chars]ht': '...Set self.maxDiff to None to see it. : Verifique se sua rota está retornando todos os campos com a formatação correta.") tblen=1>>
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_create_pet>
            nextitem: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet
            location: ('tests/tarefas/tarefa_3/test_views.py', 117, 'PetViewsTest.test_can_create_pet')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
          nextitem: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists
            location: ('tests/tarefas/tarefa_3/test_views.py', 146, 'PetViewsTest.test_can_create_pet_without_duplicating_a_group_already_exists')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
        early skip of rewriting module: django.conf.urls [assertion]
        early skip of rewriting module: django.views.defaults [assertion]
        early skip of rewriting module: django.templatetags.cache [assertion]
        early skip of rewriting module: django.core.cache.utils [assertion]
        early skip of rewriting module: django.templatetags.l10n [assertion]
        early skip of rewriting module: django.templatetags.tz [assertion]
        early skip of rewriting module: django.contrib.admin.templatetags.admin_list [assertion]
        early skip of rewriting module: django.contrib.admin.views.main [assertion]
        early skip of rewriting module: django.contrib.admin.templatetags.base [assertion]
        early skip of rewriting module: django.contrib.admin.templatetags.admin_modify [assertion]
        early skip of rewriting module: django.contrib.admin.templatetags.log [assertion]
        early skip of rewriting module: django.contrib.auth.templatetags [assertion]
        early skip of rewriting module: django.contrib.contenttypes.templatetags [assertion]
        early skip of rewriting module: django.contrib.sessions.templatetags [assertion]
        early skip of rewriting module: django.contrib.messages.templatetags [assertion]
        early skip of rewriting module: django.contrib.staticfiles.templatetags [assertion]
        early skip of rewriting module: rest_framework.templatetags [assertion]
        early skip of rewriting module: rest_framework.templatetags.rest_framework [assertion]
        early skip of rewriting module: pets.templatetags [assertion]
        early skip of rewriting module: traits.templatetags [assertion]
        early skip of rewriting module: groups.templatetags [assertion]
        early skip of rewriting module: django.template.loaders [assertion]
        early skip of rewriting module: django.template.loaders.cached [assertion]
        early skip of rewriting module: django.template.loaders.base [assertion]
        early skip of rewriting module: django.template.loaders.filesystem [assertion]
        early skip of rewriting module: django.template.loaders.app_directories [assertion]
        early skip of rewriting module: django.conf.locale.en_US [assertion]
        early skip of rewriting module: django.conf.locale.en [assertion]
        early skip of rewriting module: django.conf.locale.en.formats [assertion]
        early skip of rewriting module: django.core.mail.backends [assertion]
        early skip of rewriting module: django.core.mail.backends.locmem [assertion]
        early skip of rewriting module: django.core.mail.backends.base [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
            call: <CallInfo when='call' excinfo=<ExceptionInfo IntegrityError('UNIQUE constraint failed: groups_group.scientific_name') tblen=33>>
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
            nextitem: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists
            location: ('tests/tarefas/tarefa_3/test_views.py', 146, 'PetViewsTest.test_can_create_pet_without_duplicating_a_group_already_exists')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
          nextitem: <TestCaseFunction test_can_list_pets_with_pagination>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists
            location: ('tests/tarefas/tarefa_3/test_views.py', 164, 'PetViewsTest.test_can_create_pet_without_duplicating_a_trait_that_already_exists')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=4>>
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
            nextitem: <TestCaseFunction test_can_list_pets_with_pagination>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists
            location: ('tests/tarefas/tarefa_3/test_views.py', 164, 'PetViewsTest.test_can_create_pet_without_duplicating_a_trait_that_already_exists')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_list_pets_with_pagination>
          nextitem: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination
            location: ('tests/tarefas/tarefa_3/test_views.py', 51, 'PetViewsTest.test_can_list_pets_with_pagination')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_list_pets_with_pagination>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_list_pets_with_pagination>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_list_pets_with_pagination>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_list_pets_with_pagination>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_list_pets_with_pagination>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=5>>
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_list_pets_with_pagination>
            nextitem: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_list_pets_with_pagination>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination
            location: ('tests/tarefas/tarefa_3/test_views.py', 51, 'PetViewsTest.test_can_list_pets_with_pagination')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
          nextitem: <TestCaseFunction test_can_delete_pet>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys
            location: ('tests/tarefas/tarefa_3/test_views.py', 187, 'PetViewsTest.test_can_not_create_pet_when_missing_keys')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
            nextitem: <TestCaseFunction test_can_delete_pet>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetViewsTest' scope='class' baseid='tests/tarefas/tarefa_3/test_views.py::PetViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetViewsTest' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetViewsTest' scope='class' baseid='tests/tarefas/tarefa_3/test_views.py::PetViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetViewsTest' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetViewsTest' scope='class' baseid='tests/tarefas/tarefa_3/test_views.py::PetViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetViewsTest' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetViewsTest' scope='class' baseid='tests/tarefas/tarefa_3/test_views.py::PetViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetViewsTest' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetViewsTest' scope='class' baseid='tests/tarefas/tarefa_3/test_views.py::PetViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetViewsTest' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_create_pet_when_missing_keys>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_not_create_pet_when_missing_keys
            location: ('tests/tarefas/tarefa_3/test_views.py', 187, 'PetViewsTest.test_can_not_create_pet_when_missing_keys')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_delete_pet>
          nextitem: <TestCaseFunction test_can_list_pets_by_query_param>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet
            location: ('tests/tarefas/tarefa_4/test_views.py', 253, 'PetDetailViewsTest.test_can_delete_pet')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_delete_pet>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_delete_pet>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_delete_pet>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_delete_pet>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_delete_pet>
            nextitem: <TestCaseFunction test_can_list_pets_by_query_param>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_delete_pet>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_delete_pet
            location: ('tests/tarefas/tarefa_4/test_views.py', 253, 'PetDetailViewsTest.test_can_delete_pet')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_list_pets_by_query_param>
          nextitem: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param
            location: ('tests/tarefas/tarefa_4/test_views.py', 51, 'PetDetailViewsTest.test_can_list_pets_by_query_param')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_list_pets_by_query_param>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_list_pets_by_query_param>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_list_pets_by_query_param>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_list_pets_by_query_param>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_list_pets_by_query_param>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=5>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_list_pets_by_query_param>
            nextitem: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_list_pets_by_query_param>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param
            location: ('tests/tarefas/tarefa_4/test_views.py', 51, 'PetDetailViewsTest.test_can_list_pets_by_query_param')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
          nextitem: <TestCaseFunction test_can_not_update_non_existing_pet_id>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id
            location: ('tests/tarefas/tarefa_4/test_views.py', 243, 'PetDetailViewsTest.test_can_not_delete_non_existing_pet_id')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
            nextitem: <TestCaseFunction test_can_not_update_non_existing_pet_id>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_delete_non_existing_pet_id>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_delete_non_existing_pet_id
            location: ('tests/tarefas/tarefa_4/test_views.py', 243, 'PetDetailViewsTest.test_can_not_delete_non_existing_pet_id')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
          nextitem: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id
            location: ('tests/tarefas/tarefa_4/test_views.py', 148, 'PetDetailViewsTest.test_can_not_update_non_existing_pet_id')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
            nextitem: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_update_non_existing_pet_id>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_non_existing_pet_id
            location: ('tests/tarefas/tarefa_4/test_views.py', 148, 'PetDetailViewsTest.test_can_not_update_non_existing_pet_id')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
          nextitem: <TestCaseFunction test_can_retrieve_pet>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field
            location: ('tests/tarefas/tarefa_4/test_views.py', 228, 'PetDetailViewsTest.test_can_not_update_pet_with_invalid_sex_field')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
            call: <CallInfo when='call' excinfo=<ExceptionInfo IndexError('list index out of range') tblen=18>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
            nextitem: <TestCaseFunction test_can_retrieve_pet>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field
            location: ('tests/tarefas/tarefa_4/test_views.py', 228, 'PetDetailViewsTest.test_can_not_update_pet_with_invalid_sex_field')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_retrieve_pet>
          nextitem: <TestCaseFunction test_can_update_pet_group>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet
            location: ('tests/tarefas/tarefa_4/test_views.py', 121, 'PetDetailViewsTest.test_can_retrieve_pet')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_retrieve_pet>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_retrieve_pet>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_retrieve_pet>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_retrieve_pet>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_retrieve_pet>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("{'id'[42 chars]ht': 10.2, 'sex': 'female', 'group': {'id': 1,[94 chars]: []} != {'id'[42 chars]ht': '1...': '10.20'}\n?            +    ++\n : Verifique se sua rota está retornando todos os campos com a formatação correta.") tblen=1>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_retrieve_pet>
            nextitem: <TestCaseFunction test_can_update_pet_group>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_retrieve_pet>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet
            location: ('tests/tarefas/tarefa_4/test_views.py', 121, 'PetDetailViewsTest.test_can_retrieve_pet')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_update_pet_group>
          nextitem: <TestCaseFunction test_can_update_pet_traits>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group
            location: ('tests/tarefas/tarefa_4/test_views.py', 214, 'PetDetailViewsTest.test_can_update_pet_group')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_update_pet_group>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_group>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_update_pet_group>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_group>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_update_pet_group>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError('Direct assignment to the forward side of a many-to-many set is prohibited. Use traits.set() instead.') tblen=22>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_update_pet_group>
            nextitem: <TestCaseFunction test_can_update_pet_traits>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_group>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group
            location: ('tests/tarefas/tarefa_4/test_views.py', 214, 'PetDetailViewsTest.test_can_update_pet_group')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_update_pet_traits>
          nextitem: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits
            location: ('tests/tarefas/tarefa_4/test_views.py', 193, 'PetDetailViewsTest.test_can_update_pet_traits')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_update_pet_traits>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_traits>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_update_pet_traits>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_traits>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_update_pet_traits>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=4>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_update_pet_traits>
            nextitem: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_traits>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits
            location: ('tests/tarefas/tarefa_4/test_views.py', 193, 'PetDetailViewsTest.test_can_update_pet_traits')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
          nextitem: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group
            location: ('tests/tarefas/tarefa_4/test_views.py', 179, 'PetDetailViewsTest.test_can_update_pet_without_duplicating_existing_group')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
            call: <CallInfo when='call' excinfo=<ExceptionInfo IntegrityError('UNIQUE constraint failed: groups_group.scientific_name') tblen=33>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
            nextitem: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group
            location: ('tests/tarefas/tarefa_4/test_views.py', 179, 'PetDetailViewsTest.test_can_update_pet_without_duplicating_existing_group')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait
            location: ('tests/tarefas/tarefa_4/test_views.py', 160, 'PetDetailViewsTest.test_can_update_pet_without_duplicating_existing_trait')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("Trait() got unexpected keyword arguments: 'name'") tblen=4>>
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_template_string_if_invalid_marker' scope='function' baseid=''>
              request: <SubRequest '_template_string_if_invalid_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_live_server_helper' scope='function' baseid=''>
              request: <SubRequest '_live_server_helper' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_set_urlconf' scope='function' baseid=''>
              request: <SubRequest '_django_set_urlconf' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_db_marker' scope='function' baseid=''>
              request: <SubRequest '_django_db_marker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_clear_site_cache' scope='function' baseid=''>
              request: <SubRequest '_django_clear_site_cache' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_dj_autoclear_mailbox' scope='function' baseid=''>
              request: <SubRequest '_dj_autoclear_mailbox' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_PetDetailViewsTest' scope='class' baseid='tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest'>
              request: <SubRequest '_unittest_setUpClass_fixture_PetDetailViewsTest' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_django_setup_unittest' scope='class' baseid=''>
              request: <SubRequest '_django_setup_unittest' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_update_pet_without_duplicating_existing_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_update_pet_traits>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_update_pet_group>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_retrieve_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_not_update_pet_with_invalid_sex_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_not_update_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_not_delete_non_existing_pet_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_list_pets_by_query_param>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_delete_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_not_create_pet_when_missing_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_list_pets_with_pagination>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_create_pet_without_duplicating_a_trait_that_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_create_pet_without_duplicating_a_group_already_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_can_create_pet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_if_trait_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_if_a_group_deletion_is_protected>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_if_a_group_can_have_many_pets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_sex_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_scientific_name_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_setup' scope='session' baseid=''>
              request: <SubRequest 'django_db_setup' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_parallel_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_parallel_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_xdist_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_xdist_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_modify_db_settings_tox_suffix' scope='session' baseid=''>
              request: <SubRequest 'django_db_modify_db_settings_tox_suffix' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_createdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_createdb' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_keepdb' scope='session' baseid=''>
              request: <SubRequest 'django_db_keepdb' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_use_migrations' scope='session' baseid=''>
              request: <SubRequest 'django_db_use_migrations' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_db_blocker' scope='session' baseid=''>
              request: <SubRequest 'django_db_blocker' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='django_test_environment' scope='session' baseid=''>
              request: <SubRequest 'django_test_environment' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_fail_for_invalid_template_variable' scope='session' baseid=''>
              request: <SubRequest '_fail_for_invalid_template_variable' for <TestCaseFunction test_field_created_at_properties>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_can_update_pet_without_duplicating_existing_trait>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f23f5078550>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait
            location: ('tests/tarefas/tarefa_4/test_views.py', 160, 'PetDetailViewsTest.test_can_update_pet_without_duplicating_existing_trait')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session m5-pet-kare-davi894 exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=16 testscollected=24>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f23f3c1d850>
          exitstatus: 1
          config: <_pytest.config.Config object at 0x7f23f5078550>
      early skip of rewriting module: pygments.formatters.terminal [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_created_at_properties' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::TraitModelTest::test_field_name_properties' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetModelTest::test_field_sex_properties' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetGroupRelationTest::test_if_a_group_deletion_is_protected' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_group_already_exists' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_create_pet_without_duplicating_a_trait_that_already_exists' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_3/test_views.py::PetViewsTest::test_can_list_pets_with_pagination' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_list_pets_by_query_param' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_not_update_pet_with_invalid_sex_field' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_retrieve_pet' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_group' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_traits' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_group' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_4/test_views.py::PetDetailViewsTest::test_can_update_pet_without_duplicating_existing_trait' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/tarefas/tarefa_1/test_models.py::PetTraitRelationTest::test_if_trait_can_have_many_pets' when='setup' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f23f5078550>
        finish pytest_report_teststatus --> ('error', 'E', 'ERROR') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f23f5078550>
    finish pytest_unconfigure --> [] [hook]
